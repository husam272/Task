{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\HUSAM RK\\\\New task\\\\task\\\\src\\\\components\\\\Segmentpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SegmentModalVisible from \"../SegmentModalVisible\";\nimport SetSegmentModalVisible from \"../SetSegmentModalVisible\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialSchemaOptions = [{\n  label: \"First Name\",\n  value: \"first_name\"\n}, {\n  label: \"Last Name\",\n  value: \"last_name\"\n}, {\n  label: \"Gender\",\n  value: \"gender\"\n}, {\n  label: \"Age\",\n  value: \"age\"\n}, {\n  label: \"Account Name\",\n  value: \"account_name\"\n}, {\n  label: \"City\",\n  value: \"city\"\n}, {\n  label: \"State\",\n  value: \"state\"\n}];\nconst Segmentpage = () => {\n  _s();\n  const [segmentName, setSegmentName] = useState(\"\");\n  const [schema, setSchema] = useState([]);\n  const [schemaOptions, setSchemaOptions] = useState(initialSchemaOptions);\n  const [newSchemaOption, setNewSchemaOption] = useState(\"\");\n  const handleSaveSegment = () => {\n    // Send data to server\n    fetch(\"https://webhook.site/21ea7e89-3370-472f-95d3-95c1d7bf915d\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        segment_name: segmentName,\n        schema\n      })\n    }).then(response => console.log(response));\n    console.log(handle);\n  };\n  const handleAddNewSchema = () => {\n    if (newSchemaOption !== \"\") {\n      setSchema([...schema, {\n        [newSchemaOption]: newSchemaOption\n      }]);\n      setNewSchemaOption(\"\");\n      setSchemaOptions(schemaOptions.filter(option => option.value !== newSchemaOption));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => SetSegmentModalVisible(true),\n      children: \"Save Segment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), SegmentModalVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: segmentName,\n        onChange: e => setSegmentName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newSchemaOption,\n        onChange: e => setNewSchemaOption(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Add schema to segment --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), schemaOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddNewSchema,\n        children: \"+Add new schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: schema.map((field, index) => /*#__PURE__*/_jsxDEV(\"select\", {\n          value: Object.keys(field)[0],\n          onChange: e => {\n            const newSchema = [...schema];\n            newSchema[index] = {\n              [e.target.value]: e.target.value\n            };\n            setSchema(newSchema);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select a field --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), schemaOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: schema.some(field => Object.keys(field)[0] === option.value),\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 19\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveSegment,\n        children: \"Save the segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Segmentpage, \"0KinmTz7/SfWdOJu1dKmLnjdNww=\");\n_c = Segmentpage;\nexport default Segmentpage;\nvar _c;\n$RefreshReg$(_c, \"Segmentpage\");","map":{"version":3,"names":["React","useState","SegmentModalVisible","SetSegmentModalVisible","jsxDEV","_jsxDEV","initialSchemaOptions","label","value","Segmentpage","_s","segmentName","setSegmentName","schema","setSchema","schemaOptions","setSchemaOptions","newSchemaOption","setNewSchemaOption","handleSaveSegment","fetch","method","body","JSON","stringify","segment_name","then","response","console","log","handle","handleAddNewSchema","filter","option","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","map","field","index","Object","keys","newSchema","disabled","some","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/HUSAM RK/New task/task/src/components/Segmentpage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport SegmentModalVisible from \"../SegmentModalVisible\";\r\nimport SetSegmentModalVisible from \"../SetSegmentModalVisible\"\r\n\r\nconst initialSchemaOptions = [\r\n  { label: \"First Name\", value: \"first_name\" },\r\n  { label: \"Last Name\", value: \"last_name\" },\r\n  { label: \"Gender\", value: \"gender\" },\r\n  { label: \"Age\", value: \"age\" },\r\n  { label: \"Account Name\", value: \"account_name\" },\r\n  { label: \"City\", value: \"city\" },\r\n  { label: \"State\", value: \"state\" },\r\n];\r\n\r\nconst Segmentpage = () => {\r\n  const [segmentName, setSegmentName] = useState(\"\");\r\n  const [schema, setSchema] = useState([]);\r\n  const [schemaOptions, setSchemaOptions] = useState(initialSchemaOptions);\r\n  const [newSchemaOption, setNewSchemaOption] = useState(\"\");\r\n\r\n  const handleSaveSegment = () => {\r\n    // Send data to server\r\n    fetch(\"https://webhook.site/21ea7e89-3370-472f-95d3-95c1d7bf915d\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ segment_name: segmentName, schema }),\r\n    }).then((response) => console.log(response));\r\n    console.log(handle);\r\n  };\r\n\r\n  const handleAddNewSchema = () => {\r\n    if (newSchemaOption !== \"\") {\r\n      setSchema([...schema, { [newSchemaOption]: newSchemaOption }]);\r\n      setNewSchemaOption(\"\");\r\n      setSchemaOptions(schemaOptions.filter((option) => option.value !== newSchemaOption));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => SetSegmentModalVisible(true)}>Save Segment</button>\r\n      {SegmentModalVisible && (\r\n        <div>\r\n          <input type=\"text\" value={segmentName} onChange={(e) => setSegmentName(e.target.value)} />\r\n          <select\r\n            value={newSchemaOption}\r\n            onChange={(e) => setNewSchemaOption(e.target.value)}\r\n          >\r\n            <option value=\"\">-- Add schema to segment --</option>\r\n            {schemaOptions.map((option) => (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button onClick={handleAddNewSchema}>+Add new schema</button>\r\n          <div>\r\n            {schema.map((field, index) => (\r\n              <select\r\n                key={index}\r\n                value={Object.keys(field)[0]}\r\n                onChange={(e) => {\r\n                  const newSchema = [...schema];\r\n                  newSchema[index] = { [e.target.value]: e.target.value };\r\n                  setSchema(newSchema);\r\n                }}\r\n              >\r\n                <option value=\"\">-- Select a field --</option>\r\n                {schemaOptions.map((option) => (\r\n                  <option\r\n                    key={option.value}\r\n                    value={option.value}\r\n                    disabled={schema.some((field) => Object.keys(field)[0] === option.value)}\r\n                  >\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            ))}\r\n          </div>\r\n          <button onClick={handleSaveSegment}>Save the segment</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Segmentpage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}