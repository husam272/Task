{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\HUSAM RK\\\\New task\\\\task\\\\src\\\\components\\\\Segmentpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialSchemaOptions = [{\n  label: \"First Name\",\n  value: \"first_name\"\n}, {\n  label: \"Last Name\",\n  value: \"last_name\"\n}, {\n  label: \"Gender\",\n  value: \"gender\"\n}, {\n  label: \"Age\",\n  value: \"age\"\n}, {\n  label: \"Account Name\",\n  value: \"account_name\"\n}, {\n  label: \"City\",\n  value: \"city\"\n}, {\n  label: \"State\",\n  value: \"state\"\n}];\nconst Segmentpage = () => {\n  _s();\n  const [segmentName, setSegmentName] = useState(\"\");\n  const [schema, setSchema] = useState([]);\n  const [schemaOptions, setSchemaOptions] = useState(initialSchemaOptions);\n  const [newSchemaOption, setNewSchemaOption] = useState(\"\");\n  const handleSaveSegment = () => {\n    // Send data to server\n    fetch(\"https://webhook.site/21ea7e89-3370-472f-95d3-95c1d7bf915d\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        segment_name: segmentName,\n        schema\n      })\n    }).then(response => console.log(response));\n  };\n  const handleAddNewSchema = () => {\n    if (newSchemaOption !== \"\") {\n      setSchema([...schema, {\n        [newSchemaOption]: newSchemaOption\n      }]);\n      setNewSchemaOption(\"\");\n      setSchemaOptions(schemaOptions.filter(option => option.value !== newSchemaOption));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIosIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title1\",\n          children: \"View Audience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: segmentName,\n        onChange: e => setSegmentName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newSchemaOption,\n        onChange: e => setNewSchemaOption(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Add schema to segment --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), schemaOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddNewSchema,\n        children: \"+Add new schema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: schema.map((field, index) => /*#__PURE__*/_jsxDEV(\"select\", {\n          value: Object.keys(field)[0],\n          onChange: e => {\n            const newSchema = [...schema];\n            newSchema[index] = {\n              [e.target.value]: e.target.value\n            };\n            setSchema(newSchema);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select a field --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), schemaOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: schema.some(field => Object.keys(field)[0] === option.value),\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveSegment,\n        children: \"Save the segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Segmentpage, \"0KinmTz7/SfWdOJu1dKmLnjdNww=\");\n_c = Segmentpage;\nexport default Segmentpage;\nvar _c;\n$RefreshReg$(_c, \"Segmentpage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialSchemaOptions","label","value","Segmentpage","_s","segmentName","setSegmentName","schema","setSchema","schemaOptions","setSchemaOptions","newSchemaOption","setNewSchemaOption","handleSaveSegment","fetch","method","body","JSON","stringify","segment_name","then","response","console","log","handleAddNewSchema","filter","option","children","className","ArrowBackIosIcon","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","map","onClick","field","index","Object","keys","newSchema","disabled","some","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/HUSAM RK/New task/task/src/components/Segmentpage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\nconst initialSchemaOptions = [\r\n  { label: \"First Name\", value: \"first_name\" },\r\n  { label: \"Last Name\", value: \"last_name\" },\r\n  { label: \"Gender\", value: \"gender\" },\r\n  { label: \"Age\", value: \"age\" },\r\n  { label: \"Account Name\", value: \"account_name\" },\r\n  { label: \"City\", value: \"city\" },\r\n  { label: \"State\", value: \"state\" },\r\n];\r\n\r\nconst Segmentpage = () => {\r\n  const [segmentName, setSegmentName] = useState(\"\");\r\n  const [schema, setSchema] = useState([]);\r\n  const [schemaOptions, setSchemaOptions] = useState(initialSchemaOptions);\r\n  const [newSchemaOption, setNewSchemaOption] = useState(\"\");\r\n\r\n  const handleSaveSegment = () => {\r\n    // Send data to server\r\n    fetch(\"https://webhook.site/21ea7e89-3370-472f-95d3-95c1d7bf915d\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ segment_name: segmentName, schema }),\r\n    }).then((response) => console.log(response));\r\n   \r\n  };\r\n\r\n  const handleAddNewSchema = () => {\r\n    if (newSchemaOption !== \"\") {\r\n      setSchema([...schema, { [newSchemaOption]: newSchemaOption }]);\r\n      setNewSchemaOption(\"\");\r\n      setSchemaOptions(schemaOptions.filter((option) => option.value !== newSchemaOption));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n      {\r\n        <div>\r\n             <div className='header'>\r\n                <div className='icon'><ArrowBackIosIcon/></div>\r\n                <div className='title1'>View Audience</div>\r\n            </div>\r\n          <input type=\"text\" value={segmentName} onChange={(e) => setSegmentName(e.target.value)} />\r\n          <select\r\n            value={newSchemaOption}\r\n            onChange={(e) => setNewSchemaOption(e.target.value)}\r\n          >\r\n            <option value=\"\">-- Add schema to segment --</option>\r\n            {schemaOptions.map((option) => (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button onClick={handleAddNewSchema}>+Add new schema</button>\r\n          <div>\r\n            {schema.map((field, index) => (\r\n              <select\r\n                key={index}\r\n                value={Object.keys(field)[0]}\r\n                onChange={(e) => {\r\n                  const newSchema = [...schema];\r\n                  newSchema[index] = { [e.target.value]: e.target.value };\r\n                  setSchema(newSchema);\r\n                }}\r\n              >\r\n                <option value=\"\">-- Select a field --</option>\r\n                {schemaOptions.map((option) => (\r\n                  <option\r\n                    key={option.value}\r\n                    value={option.value}\r\n                    disabled={schema.some((field) => Object.keys(field)[0] === option.value)}\r\n                  >\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            ))}\r\n          </div>\r\n          <button onClick={handleSaveSegment}>Save the segment</button>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Segmentpage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}